{"version":3,"file":"static/js/656.9e2d7d97.chunk.js","mappings":"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","sources":["services/behoefteService.js","services/api.js","pages/AdviesPage.js"],"sourcesContent":["import callApi from './api';\r\n\r\nexport const addBehoefte = async (behoefteData) => {\r\n  return callApi(\"behoefte\", '/behoefte', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(behoefteData),\r\n  });\r\n};\r\n\r\nexport const startCategorieAanvraag = async (inputData) => {\r\n  return callApi(\"aanvraag\", '/aanvraag/categorie', {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(inputData),\r\n  });\r\n};\r\n\r\nexport const getPassendeCategorieenLijst = async (clientId) => {\r\n  return callApi(\"aanvraag\", `/aanvraag/recommendatie/categorie/?patientId=${clientId}`);\r\n};\r\n\r\nexport const kiesCategorie = async (inputData) => {\r\n  return callApi(\"aanvraag\", '/aanvraag/categorie/kies', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(inputData),\r\n  });\r\n};\r\n\r\nexport const startProductAanvraag = async (inputData) => {\r\n  return callApi(\"aanvraag\", '/aanvraag/product', {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(inputData),\r\n  });\r\n};\r\n\r\nexport const getPassendeProductenLijst = async (clientId) => {\r\n  return callApi(\"aanvraag\", `/aanvraag/recommendatie/product/?clientId=${clientId}`);\r\n};\r\n\r\nexport const getZorgdossierByClientId = async (clientId) => {\r\n    try {\r\n        const response = await callApi(\"ecd\", `/api/zorgdossier/client/${clientId}`);\r\n        return response && response.id ? response : null;\r\n    } catch (error) {\r\n        console.error(\"Error fetching zorgdossier:\", error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const getOnderzoekByDossierId = async (zorgdossierId) => {\r\n    try {\r\n        const response = await callApi(\"ecd\", `/api/onderzoek/dossier/${zorgdossierId}`);\r\n        return response || null;\r\n    } catch (error) {\r\n        console.error(\"Error fetching onderzoek by dossier ID:\", error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const getOnderzoekByOnderzoekId = async (zorgdossierId) => {\r\n    try {\r\n        const response = await callApi(\"ecd\", `/api/onderzoek/${zorgdossierId}`);\r\n        return response && response.length > 0 ? response[0] : null;\r\n    } catch (error) {\r\n        console.error(\"Error fetching onderzoek by zorgdossier ID:\", error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const createZorgdossier = async (zorgdossierData) => {\r\n    return await callApi(\"behoefte\", \"/ecd/zorgdossier\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(zorgdossierData),\r\n    });\r\n};\r\n\r\nexport const createOnderzoek = async (onderzoekData) => {\r\n    return await callApi(\"behoefte\", \"/ecd/onderzoek\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(onderzoekData),\r\n    });\r\n};\r\n\r\nexport const createDiagnose = async (onderzoekId, data) => {\r\n  return callApi(\"behoefte\", `/ecd/onderzoek/${onderzoekId}/diagnose`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n};\r\n\r\nexport const kiesProduct = async (inputData) => {\r\n  return callApi(\"aanvraag\", '/aanvraag/product/kies', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(inputData),\r\n  });\r\n};\r\n\r\nexport const getClient = async (clientId) => {\r\n    try {\r\n        const response = await callApi(\"ecd\", `/api/client/${clientId}`);\r\n        return response;\r\n    } catch (error) {\r\n        console.error(`Error fetching client with ID ${clientId}:`, error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getBehoeftenByClientId = async (clientId) => {\r\n  return callApi(\"behoefte\", `/behoefte/client/${clientId}`);\r\n};\r\n\r\nexport const startAanvraag = async (aanvraagData, behoefteId) => {\r\n  console.log(aanvraagData, behoefteId)\r\n  return callApi(\"behoefte\", `/behoefte/${behoefteId}/aanvraagverwerking`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(aanvraagData),\r\n  });\r\n};\r\n\r\nexport const getAanvragenByClientId = async (clientId) => {\r\n  return callApi(\"aanvraag\", `/aanvraag/client/${clientId}`);\r\n};","// Map servicenamen naar hun omgevingsvariabelen\r\nconst API_URLS = {\r\n  behoefte: process.env.REACT_APP_BEHOEFTE_API_BASE_URL,\r\n  aanvraag: process.env.REACT_APP_AANVRAAG_API_BASE_URL,\r\n  product: process.env.REACT_APP_PRODUCT_API_BASE_URL,\r\n  ecd: process.env.REACT_APP_ECD_API_BASE_URL,\r\n  bestel: process.env.REACT_APP_BESTEL_API_BASE_URL,\r\n};\r\n\r\n// Functie om de juiste basis-URL op te halen\r\nconst getApiBaseUrl = (serviceName) => {\r\n  const url = API_URLS[serviceName];\r\n  if (!url) {\r\n    console.error(`ERROR: API base URL for service '${serviceName}' is not defined.`);\r\n    // Werp een fout of retourneer een fallback URL\r\n    throw new Error(`API base URL for service '${serviceName}' is not configured.`);\r\n  }\r\n  return url;\r\n};\r\n\r\nconst callApi = async (serviceName, endpoint, options = {}) => {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    ...options.headers,\r\n  };\r\n\r\n  const baseUrl = getApiBaseUrl(serviceName); // Haal de service-specifieke URL op\r\n\r\n  const response = await fetch(`${baseUrl}${endpoint}`, {\r\n    method: options.method || 'GET',\r\n    ...options,\r\n    headers,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    let errorDetail = await response.text();\r\n    try {\r\n      console.log(\"lskdjflksdjf\", response)\r\n      const errorJson = JSON.parse(errorDetail);\r\n      errorDetail = errorJson.message || errorDetail;\r\n    } catch (e) {\r\n      // ignore\r\n    }\r\n    throw new Error(`API Error ${response.status}: ${errorDetail}`);\r\n  }\r\n\r\n  if (response.status === 204 || response.headers.get('Content-Length') === '0') {\r\n    return null;\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\nexport default callApi;","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { List, Card, Spin, message, Button } from 'antd';\r\nimport Container from '../common/Container';\r\nimport {\r\n  startProductAanvraag,\r\n  getPassendeProductenLijst,\r\n  kiesProduct,\r\n} from '../services/behoefteService'; // Pas aan indien nodig\r\nconst AdviesPage = () => {\r\n  const { clientId, aanvraagId } = useParams();\r\n  const [producten, setProducten] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [aanvraagDetails, setAanvraagDetails] = useState(null); // Om de gekozen categorie en behoeftebeschrijving te weten\r\n\r\n  useEffect(() => {\r\n    if (clientId && aanvraagId) {\r\n      // Normaal zou je hier eerst de aanvraag details ophalen, inclusief de gekozen categorie\r\n      // Voor nu simuleren we dit.\r\n      fetchAanvraagDetails(clientId, aanvraagId);\r\n    }\r\n  }, [clientId, aanvraagId]);\r\n\r\n  const fetchAanvraagDetails = async (clientId, aanvraagId) => {\r\n    // Deze functie zou een API call moeten doen om de volledige aanvraag op te halen\r\n    // zodat we de behoeftebeschrijving en gekozen categorie ID weten.\r\n    // Voorbeeld: const details = await getAanvraagById(aanvraagId);\r\n    // Voorlopig hardcoded, dit moet je later vervangen.\r\n    const mockAanvraagDetails = {\r\n      clientid: clientId,\r\n      behoefteid: aanvraagId, // In dit voorbeeld gebruiken we behoefteId als aanvraagId\r\n      behoeftebeschrijving: \"Behoefte om langer thuis te blijven wonen\", // Placeholder\r\n      gekozencategorieid: 1 // Placeholder: ID van de gekozen categorie\r\n    };\r\n    setAanvraagDetails(mockAanvraagDetails);\r\n    \r\n    // Zodra we de details hebben, starten we de product aanvraag\r\n    handleStartProductAanvraag(mockAanvraagDetails);\r\n  };\r\n\r\n\r\n  const handleStartProductAanvraag = async (details) => {\r\n    setLoading(true);\r\n    try {\r\n      const inputData = {\r\n        client_id: details.clientid,\r\n        behoefte_beschrijving: details.behoeftebeschrijving,\r\n        gekozen_categorie_id: details.gekozencategorieid,\r\n      };\r\n      await startProductAanvraag(inputData);\r\n      message.success(\"Productaanvraag gestart. Producten ophalen...\");\r\n      \r\n      const fetchedProducts = await getPassendeProductenLijst(details.clientid);\r\n      setProducten(fetchedProducts.productlijst);\r\n      message.success(\"Producten succesvol opgehaald.\");\r\n\r\n    } catch (error) {\r\n      message.error(\"Fout bij opvragen productaanbeveling: \" + error.message);\r\n      console.error(\"Error starting product request:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKiesProduct = async (productEAN) => {\r\n    if (!aanvraagDetails) {\r\n      message.error(\"Aanvraagdetails niet geladen.\");\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    try {\r\n      const inputData = {\r\n        client_id: aanvraagDetails.clientid,\r\n        behoefte_id: aanvraagDetails.behoefteid,\r\n        product_ean: productEAN\r\n      };\r\n      await kiesProduct(inputData);\r\n      message.success(`Product ${productEAN} gekozen.`);\r\n      // Hier kun je verdere acties ondernemen, bijv. naar een bevestigingspagina\r\n    } catch (error) {\r\n      message.error(\"Fout bij het kiezen van product: \" + error.message);\r\n      console.error(\"Error choosing product:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container>\r\n        <Spin size=\"large\" tip=\"Producten laden...\" />\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Product Aanbevelingen voor Client: {clientId}</h1>\r\n      {producten.length > 0 ? (\r\n        <List\r\n          grid={{ gutter: 16, xs: 1, sm: 2, md: 3, lg: 4, xl: 4, xxl: 4 }}\r\n          dataSource={producten}\r\n          renderItem={(product) => (\r\n            <List.Item>\r\n              <Card\r\n                title={product.Naam}\r\n                actions={[\r\n                  <Button type=\"primary\" onClick={() => handleKiesProduct(product.EAN)}>\r\n                    Kies Product\r\n                  </Button>,\r\n                ]}\r\n              >\r\n                <p>EAN: {product.EAN}</p>\r\n                <p>Prijs: €{product.Prijs ? product.Prijs.toFixed(2) : 'N/A'}</p>\r\n                <p>Beschrijving: {product.Beschrijving || 'Geen beschrijving'}</p>\r\n                {/* Voeg hier meer productdetails toe */}\r\n              </Card>\r\n            </List.Item>\r\n          )}\r\n        />\r\n      ) : (\r\n        <p>Geen product aanbevelingen gevonden voor deze aanvraag.</p>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AdviesPage;"],"names":["addBehoefte","async","callApi","method","headers","body","JSON","stringify","behoefteData","startCategorieAanvraag","inputData","getPassendeCategorieenLijst","clientId","kiesCategorie","startProductAanvraag","getPassendeProductenLijst","getZorgdossierByClientId","response","id","error","console","getOnderzoekByDossierId","zorgdossierId","createZorgdossier","zorgdossierData","createOnderzoek","onderzoekData","createDiagnose","onderzoekId","data","kiesProduct","getClient","getBehoeftenByClientId","startAanvraag","aanvraagData","behoefteId","log","getAanvragenByClientId","API_URLS","behoefte","process","aanvraag","product","ecd","bestel","serviceName","endpoint","options","arguments","length","undefined","baseUrl","url","Error","getApiBaseUrl","fetch","ok","errorDetail","text","parse","message","e","status","get","json","AdviesPage","aanvraagId","useParams","producten","setProducten","useState","loading","setLoading","aanvraagDetails","setAanvraagDetails","useEffect","fetchAanvraagDetails","mockAanvraagDetails","clientid","behoefteid","behoeftebeschrijving","gekozencategorieid","handleStartProductAanvraag","client_id","details","behoefte_beschrijving","gekozen_categorie_id","success","fetchedProducts","productlijst","_jsx","Container","children","Spin","size","tip","_jsxs","List","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","Item","Card","title","Naam","actions","Button","type","onClick","behoefte_id","product_ean","productEAN","handleKiesProduct","EAN","Prijs","toFixed","Beschrijving"],"sourceRoot":""}