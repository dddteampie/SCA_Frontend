{"version":3,"file":"static/js/467.c150e2b0.chunk.js","mappings":"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","sources":["pages/ClientSelectionPage.js","services/api.js","services/clientService.js"],"sourcesContent":["// src/pages/ClientSelectionPage.js (Gecorrigeerde versie)\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom'; // Voor React Router v5\r\nimport { Button, Input, List, Card, Spin, message } from 'antd';\r\nimport Container from '../common/Container';\r\nimport { getClients, addClient } from '../services/clientService'; // Zorg dat deze paden correct zijn\r\nimport moment from 'moment'; // Voor het formatteren van de geboortedatum indien nodig\r\n\r\nconst ClientSelectionPage = () => {\r\n  const history = useHistory();\r\n  const [clients, setClients] = useState([]);\r\n  const [newClientName, setNewClientName] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  // activeClient state is hier niet direct nodig voor de navigatielogica,\r\n  // maar kan nuttig zijn voor andere UI-doeleinden, dus ik laat hem staan.\r\n  const [activeClient, setActiveClient] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchClients();\r\n  }, []);\r\n\r\n  const fetchClients = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const fetchedClients = await getClients();\r\n      setClients(fetchedClients || []); // Zorg ervoor dat clients altijd een array is\r\n    } catch (error) {\r\n      message.error(\"Fout bij het laden van cliënten.\");\r\n      console.error(\"Error fetching clients:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddClient = async () => {\r\n    if (!newClientName.trim()) {\r\n      message.warning(\"Voer een naam in voor de nieuwe cliënt.\");\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    try {\r\n      const newClientData = {\r\n        naam: newClientName,\r\n        adres: \"Onbekend\", // Tijdelijke placeholder\r\n        geboortedatum: moment().toISOString(), // Gebruik moment voor consistente ISO-format\r\n      };\r\n      // Je backend reageert met `{ \"clientId\": \"...\" }`\r\n      const response = await addClient(newClientData);\r\n\r\n      if (response && response.clientId) {\r\n        const addedClient = {\r\n          // Gebruik response.clientId zoals je Go backend die levert\r\n          id: response.clientId,\r\n          naam: newClientName,\r\n          adres: newClientData.adres, // Gebruik de data die je hebt verstuurd\r\n          geboortedatum: newClientData.geboortedatum,\r\n        };\r\n        setClients([...clients, addedClient]);\r\n        setNewClientName('');\r\n        message.success(`Cliënt \"${addedClient.naam}\" succesvol toegevoegd.`);\r\n\r\n        // **BELANGRIJK: Navigeer nu naar de ClientDetailPage voor initialisatie**\r\n        history.push(`/clients/${addedClient.id}`);\r\n      } else {\r\n        message.error(\"Fout bij het toevoegen van cliënt: Geen geldig ID ontvangen.\");\r\n      }\r\n\r\n    } catch (error) {\r\n      message.error(\"Fout bij het toevoegen van cliënt: \" + error.message);\r\n      console.error(\"Error adding client:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSelectClient = (client) => {\r\n    setActiveClient(client); // Optioneel, voor UI weergave\r\n    \r\n    message.success(`Cliënt \"${client.naam}\" geselecteerd.`);\r\n    // **Navigeer naar de ClientDetailPage als tussenstap**\r\n    history.push(`/clients/${client.id}`);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container>\r\n        <Spin size=\"large\" tip=\"Cliënten laden...\" />\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Cliënt Selectie</h1>\r\n      <Card title=\"Nieuwe Cliënt Toevoegen\" style={{ marginBottom: '20px' }}>\r\n        <Input\r\n          placeholder=\"Naam van de nieuwe cliënt\"\r\n          value={newClientName}\r\n          onChange={(e) => setNewClientName(e.target.value)}\r\n          style={{ width: 'calc(100% - 100px)', marginRight: '10px' }}\r\n        />\r\n        <Button type=\"primary\" onClick={handleAddClient}>\r\n          Toevoegen\r\n        </Button>\r\n      </Card>\r\n\r\n      <Card title=\"Bestaande Cliënten\">\r\n        <List\r\n          bordered\r\n          dataSource={clients}\r\n          renderItem={(client) => (\r\n            <List.Item\r\n              actions={[\r\n                <Button key=\"select\" onClick={() => handleSelectClient(client)}>\r\n                  Selecteer\r\n                </Button>,\r\n              ]}\r\n            >\r\n              <List.Item.Meta\r\n                title={client.naam}\r\n                description={`ID: ${client.id}`}\r\n              />\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ClientSelectionPage;","// Map servicenamen naar hun omgevingsvariabelen\r\nconst API_URLS = {\r\n  behoefte: process.env.REACT_APP_BEHOEFTE_API_BASE_URL,\r\n  aanvraag: process.env.REACT_APP_AANVRAAG_API_BASE_URL,\r\n  product: process.env.REACT_APP_PRODUCT_API_BASE_URL,\r\n  ecd: process.env.REACT_APP_ECD_API_BASE_URL, \r\n};\r\n\r\n// Functie om de juiste basis-URL op te halen\r\nconst getApiBaseUrl = (serviceName) => {\r\n  const url = API_URLS[serviceName];\r\n  if (!url) {\r\n    console.error(`ERROR: API base URL for service '${serviceName}' is not defined.`);\r\n    // Werp een fout of retourneer een fallback URL\r\n    throw new Error(`API base URL for service '${serviceName}' is not configured.`);\r\n  }\r\n  return url;\r\n};\r\n\r\nconst callApi = async (serviceName, endpoint, options = {}) => {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    ...options.headers,\r\n  };\r\n\r\n  const baseUrl = getApiBaseUrl(serviceName); // Haal de service-specifieke URL op\r\n\r\n  const response = await fetch(`${baseUrl}${endpoint}`, {\r\n    method: options.method || 'GET',\r\n    ...options,\r\n    headers,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    let errorDetail = await response.text();\r\n    try {\r\n      console.log(\"lskdjflksdjf\", response)\r\n      const errorJson = JSON.parse(errorDetail);\r\n      errorDetail = errorJson.message || errorDetail;\r\n    } catch (e) {\r\n      // ignore\r\n    }\r\n    throw new Error(`API Error ${response.status}: ${errorDetail}`);\r\n  }\r\n\r\n  if (response.status === 204 || response.headers.get('Content-Length') === '0') {\r\n    return null;\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\nexport default callApi;","import callApi from './api';\r\n\r\nexport const getClients = async () => {\r\n  return callApi('ecd', '/api/client');\r\n};\r\n\r\nexport const addClient = async (clientData) => {\r\n  return callApi('behoefte', '/ecd/client', { \r\n    method: 'POST',\r\n    body: JSON.stringify(clientData),\r\n  });\r\n};\r\n"],"names":["ClientSelectionPage","history","useHistory","clients","setClients","useState","newClientName","setNewClientName","loading","setLoading","activeClient","setActiveClient","useEffect","fetchClients","async","fetchedClients","getClients","error","message","console","_jsx","Container","children","Spin","size","tip","_jsxs","Card","title","style","marginBottom","Input","placeholder","value","onChange","e","target","width","marginRight","Button","type","onClick","trim","newClientData","naam","adres","geboortedatum","moment","toISOString","response","addClient","clientId","addedClient","id","success","push","warning","List","bordered","dataSource","renderItem","client","Item","actions","handleSelectClient","Meta","description","API_URLS","behoefte","process","aanvraag","product","ecd","serviceName","endpoint","options","arguments","length","undefined","headers","baseUrl","url","Error","getApiBaseUrl","fetch","method","ok","errorDetail","text","log","JSON","parse","status","get","json","callApi","body","stringify","clientData"],"sourceRoot":""}