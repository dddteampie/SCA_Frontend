{"version":3,"file":"static/js/931.7f3b5a65.chunk.js","mappings":"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","sources":["services/behoefteService.js","services/api.js","pages/CreateClientPage.js","services/clientService.js"],"sourcesContent":["import callApi from './api';\r\n\r\nexport const addBehoefte = async (behoefteData) => {\r\n  return callApi(\"behoefte\", '/behoefte', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(behoefteData),\r\n  });\r\n};\r\n\r\nexport const startCategorieAanvraag = async (inputData) => {\r\n  return callApi(\"aanvraag\", '/aanvraag/categorie', {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(inputData),\r\n  });\r\n};\r\n\r\nexport const getPassendeCategorieenLijst = async (clientId) => {\r\n  return callApi(\"aanvraag\", `/aanvraag/recommendatie/categorie/?patientId=${clientId}`);\r\n};\r\n\r\nexport const kiesCategorie = async (inputData) => {\r\n  return callApi(\"aanvraag\", '/aanvraag/categorie/kies', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(inputData),\r\n  });\r\n};\r\n\r\nexport const startProductAanvraag = async (inputData) => {\r\n  return callApi(\"aanvraag\", '/aanvraag/product', {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(inputData),\r\n  });\r\n};\r\n\r\nexport const getPassendeProductenLijst = async (clientId) => {\r\n  return callApi(\"aanvraag\", `/aanvraag/recommendatie/product/?clientId=${clientId}`);\r\n};\r\n\r\nexport const getZorgdossierByClientId = async (clientId) => {\r\n    try {\r\n        const response = await callApi(\"ecd\", `/api/zorgdossier/client/${clientId}`);\r\n        return response && response.id ? response : null;\r\n    } catch (error) {\r\n        console.error(\"Error fetching zorgdossier:\", error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const getOnderzoekByDossierId = async (zorgdossierId) => {\r\n    try {\r\n        const response = await callApi(\"ecd\", `/api/onderzoek/dossier/${zorgdossierId}`);\r\n        return response || null;\r\n    } catch (error) {\r\n        console.error(\"Error fetching onderzoek by dossier ID:\", error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const getOnderzoekByOnderzoekId = async (zorgdossierId) => {\r\n    try {\r\n        const response = await callApi(\"ecd\", `/api/onderzoek/${zorgdossierId}`);\r\n        return response && response.length > 0 ? response[0] : null;\r\n    } catch (error) {\r\n        console.error(\"Error fetching onderzoek by zorgdossier ID:\", error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const createZorgdossier = async (zorgdossierData) => {\r\n    return await callApi(\"behoefte\", \"/ecd/zorgdossier\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(zorgdossierData),\r\n    });\r\n};\r\n\r\nexport const createOnderzoek = async (onderzoekData) => {\r\n    return await callApi(\"behoefte\", \"/ecd/onderzoek\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(onderzoekData),\r\n    });\r\n};\r\n\r\nexport const createDiagnose = async (onderzoekId, data) => {\r\n  return callApi(\"behoefte\", `/ecd/onderzoek/${onderzoekId}/diagnose`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n};\r\n\r\nexport const kiesProduct = async (inputData) => {\r\n  return callApi(\"aanvraag\", '/aanvraag/product/kies', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(inputData),\r\n  });\r\n};\r\n\r\nexport const getClient = async (clientId) => {\r\n    try {\r\n        const response = await callApi(\"ecd\", `/api/client/${clientId}`);\r\n        return response;\r\n    } catch (error) {\r\n        console.error(`Error fetching client with ID ${clientId}:`, error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getBehoeftenByClientId = async (clientId) => {\r\n  return callApi(\"behoefte\", `/behoefte/client/${clientId}`);\r\n};\r\n\r\nexport const startAanvraag = async (aanvraagData, behoefteId) => {\r\n  console.log(aanvraagData, behoefteId)\r\n  return callApi(\"behoefte\", `/behoefte/${behoefteId}/aanvraagverwerking`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(aanvraagData),\r\n  });\r\n};\r\n\r\nexport const getAanvragenByClientId = async (clientId) => {\r\n  return callApi(\"aanvraag\", `/aanvraag/client/${clientId}`);\r\n};","// Map servicenamen naar hun omgevingsvariabelen\r\nconst API_URLS = {\r\n  behoefte: process.env.REACT_APP_BEHOEFTE_API_BASE_URL,\r\n  aanvraag: process.env.REACT_APP_AANVRAAG_API_BASE_URL,\r\n  product: process.env.REACT_APP_PRODUCT_API_BASE_URL,\r\n  ecd: process.env.REACT_APP_ECD_API_BASE_URL, \r\n};\r\n\r\n// Functie om de juiste basis-URL op te halen\r\nconst getApiBaseUrl = (serviceName) => {\r\n  const url = API_URLS[serviceName];\r\n  if (!url) {\r\n    console.error(`ERROR: API base URL for service '${serviceName}' is not defined.`);\r\n    // Werp een fout of retourneer een fallback URL\r\n    throw new Error(`API base URL for service '${serviceName}' is not configured.`);\r\n  }\r\n  return url;\r\n};\r\n\r\nconst callApi = async (serviceName, endpoint, options = {}) => {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    ...options.headers,\r\n  };\r\n\r\n  const baseUrl = getApiBaseUrl(serviceName); // Haal de service-specifieke URL op\r\n\r\n  const response = await fetch(`${baseUrl}${endpoint}`, {\r\n    method: options.method || 'GET',\r\n    ...options,\r\n    headers,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    let errorDetail = await response.text();\r\n    try {\r\n      console.log(\"lskdjflksdjf\", response)\r\n      const errorJson = JSON.parse(errorDetail);\r\n      errorDetail = errorJson.message || errorDetail;\r\n    } catch (e) {\r\n      // ignore\r\n    }\r\n    throw new Error(`API Error ${response.status}: ${errorDetail}`);\r\n  }\r\n\r\n  if (response.status === 204 || response.headers.get('Content-Length') === '0') {\r\n    return null;\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\nexport default callApi;","import React, { useState } from 'react';\r\nimport { Form, Input, Button, DatePicker, message, Card, Spin, Typography } from 'antd';\r\nimport { useHistory } from 'react-router-dom'; \r\nimport moment from 'moment'; \r\nimport Container from '../common/Container';\r\nimport { addClient,  } from '../services/clientService'; \r\nimport { createOnderzoek, createZorgdossier } from '../services/behoefteService';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst CreateClientPage = () => {\r\n    const [form] = Form.useForm();\r\n    const [loading, setLoading] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const handleCreateClient = async (values) => {\r\n        setLoading(true);\r\n        try {\r\n            const clientData = {\r\n                naam: values.naam,\r\n                adres: values.adres,\r\n                geboortedatum: values.geboortedatum.toISOString(),\r\n            };\r\n            const newClient = await addClient(clientData);\r\n            message.success(`Client ${newClient.naam} succesvol aangemaakt!`);\r\n\r\n            const zorgdossierData = {\r\n                client_id: newClient.id,\r\n                situatie: \"Initiële situatie na aanmelding client\", \r\n            };\r\n            const newZorgdossier = await createZorgdossier(zorgdossierData);\r\n            message.success(`Zorgdossier voor ${newClient.naam} succesvol aangemaakt!`);\r\n\r\n            const vandaag = moment();\r\n            const onderzoekData = {\r\n                zorgdossier_id: newZorgdossier.id, \r\n                begin_datum: vandaag.toISOString(),\r\n                eind_datum: vandaag.add(1, 'year').toISOString(), \r\n            };\r\n            await createOnderzoek(onderzoekData);\r\n            message.success(`Onderzoek voor ${newClient.naam} succesvol aangemaakt!`);\r\n\r\n            history.push(`/clients/${newClient.id}`);\r\n            form.resetFields(); \r\n        } catch (error) {\r\n            message.error(\"Fout bij het aanmaken van client, zorgdossier of onderzoek.\");\r\n            console.error(\"Error creating client, zorgdossier, or onderzoek:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Card>\r\n                <Title level={2} style={{ textAlign: 'center' }}>Nieuwe Cliënt Aanmaken</Title>\r\n                <Spin spinning={loading} tip=\"Client, zorgdossier en onderzoek aanmaken...\">\r\n                    <Form\r\n                        form={form}\r\n                        layout=\"vertical\"\r\n                        onFinish={handleCreateClient}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"Naam Cliënt\"\r\n                            name=\"naam\"\r\n                            rules={[{ required: true, message: 'Vul de naam van de cliënt in!' }]}\r\n                        >\r\n                            <Input placeholder=\"Volledige naam\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Adres\"\r\n                            name=\"adres\"\r\n                            rules={[{ required: true, message: 'Vul het adres in!' }]}\r\n                        >\r\n                            <Input placeholder=\"Straatnaam, huisnummer, postcode, plaats\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Geboortedatum\"\r\n                            name=\"geboortedatum\"\r\n                            rules={[{ required: true, message: 'Selecteer de geboortedatum!' }]}\r\n                        >\r\n                            <DatePicker style={{ width: '100%' }} format=\"YYYY-MM-DD\" />\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" loading={loading} block>\r\n                                Cliënt Aanmaken en Initialiseren\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Spin>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CreateClientPage;","import callApi from './api';\r\n\r\nexport const getClients = async () => {\r\n  return callApi('ecd', '/api/client');\r\n};\r\n\r\nexport const addClient = async (clientData) => {\r\n  return callApi('behoefte', '/ecd/client', { \r\n    method: 'POST',\r\n    body: JSON.stringify(clientData),\r\n  });\r\n};\r\n"],"names":["addBehoefte","async","callApi","method","headers","body","JSON","stringify","behoefteData","startCategorieAanvraag","inputData","getPassendeCategorieenLijst","clientId","kiesCategorie","startProductAanvraag","getPassendeProductenLijst","getZorgdossierByClientId","response","id","error","console","getOnderzoekByDossierId","zorgdossierId","createZorgdossier","zorgdossierData","createOnderzoek","onderzoekData","createDiagnose","onderzoekId","data","kiesProduct","getClient","getBehoeftenByClientId","startAanvraag","aanvraagData","behoefteId","log","getAanvragenByClientId","API_URLS","behoefte","process","aanvraag","product","ecd","serviceName","endpoint","options","arguments","length","undefined","baseUrl","url","Error","getApiBaseUrl","fetch","ok","errorDetail","text","parse","message","e","status","get","json","Title","Typography","CreateClientPage","form","Form","useForm","loading","setLoading","useState","history","useHistory","_jsx","Container","children","_jsxs","Card","level","style","textAlign","Spin","spinning","tip","layout","onFinish","clientData","naam","values","adres","geboortedatum","toISOString","newClient","addClient","success","client_id","situatie","newZorgdossier","vandaag","moment","zorgdossier_id","begin_datum","eind_datum","add","push","resetFields","Item","label","name","rules","required","Input","placeholder","DatePicker","width","format","Button","type","htmlType","block","getClients"],"sourceRoot":""}